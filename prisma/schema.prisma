generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProfessionalRole {
  ADMIN
  SECRETARY
  EMPLOYEE
}

model Professional {
  id         String           @id @default(uuid())
  providerId String           @unique @map("provider_id")
  createdAt  DateTime         @default(now()) @map("created_at")
  updatedAt  DateTime?        @updatedAt @map("updated_at")
  deletedAt  DateTime?        @map("deleted_at")
  companyId  String           @map("company_id")
  role       ProfessionalRole @default(ADMIN)
  email      String           @unique
  name       String?
  document   String?
  isActive   Boolean          @default(true)

  company              Company               @relation(fields: [companyId], references: [id], onDelete: Cascade)
  phones               Phone[]
  scheduling           Scheduling[]
  professionalServices ProfessionalService[]
  availabilities       Availability[]

  @@map("professionals")
}

model ProfessionalService {
  id             String    @id @default(uuid())
  serviceId      String    @map("service_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")
  professionalId String    @map("professional_id")

  service      Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@map("professional_services")
}

model Service {
  id                   String                @id @default(uuid())
  description          String
  value                Float
  time                 Float
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime?             @updatedAt @map("updated_at")
  deletedAt            DateTime?             @map("deleted_at")
  professionalServices ProfessionalService[]

  @@map("services")
}

model Company {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")
  addressId      String    @map("address_id")
  businessTypeId Int?      @map("business_type_id")
  customSegment  String?
  name           String?

  address       Address        @relation(fields: [addressId], references: [id], onDelete: Cascade)
  businessType  BusinessType?  @relation(fields: [businessTypeId], references: [id])
  professionals Professional[]
  openingHours  OpeningHours[]
  phones        Phone[]

  @@map("companies")
}

model Phone {
  id             String  @id @default(uuid())
  phone          String
  companyId      String? @map("company_id")
  professionalId String? @map("professional_id")

  company      Company?      @relation(fields: [companyId], references: [id])
  professional Professional? @relation(fields: [professionalId], references: [id])

  @@map("phones")
}

model BusinessType {
  id                Int                 @id @default(autoincrement())
  icon              String
  label             String              @unique
  company           Company[]
  serviceSuggestion ServiceSuggestion[]

  @@map("business_types")
}

model ServiceSuggestion {
  id             String    @id @default(uuid())
  title          String
  description    String
  value          Float
  time           Float
  businessTypeId Int?      @map("business_type_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")

  bussinessType BusinessType? @relation(fields: [businessTypeId], references: [id])

  @@map("service_suggestions")
}

model Address {
  id           String    @id @default(uuid())
  cep          String
  street       String
  number       String
  neighborhood String
  city         String
  state        String
  complement   String?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  company Company[]

  @@map("address")
}

model OpeningHours {
  id        String    @id @default(uuid())
  companyId String?   @map("company_id") // Campo opcional para relação com `Company`
  weekday   String
  startTime String    @map("start_time")
  endTime   String    @map("end_time")
  isOpen    Boolean   @map("is_open")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("opening_hours")
}

model Availability {
  id             String   @id @default(uuid())
  professionalId String   @map("professional_id")
  date           DateTime @map("date") // Data do dia específico
  startTime      DateTime @map("start_time") // Hora de início da disponibilidade
  endTime        DateTime @map("end_time") // Hora de término da disponibilidade
  isAvailable    Boolean  @default(true) @map("is_available") // Indica se o horário ainda está disponível

  professional Professional @relation(fields: [professionalId], references: [id])
  schedulings  Scheduling[]

  @@index([professionalId, date, startTime]) // Índice para facilitar buscas por data e hora
  @@map("availabilities")
}

model Scheduling {
  id             String    @id @default(uuid())
  availabilityId String    @map("availability_id")
  clientId       String    @map("client_id")
  isBooked       Boolean   @default(true) @map("is_booked")
  observations   String?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")
  professionalId String?

  availability Availability  @relation(fields: [availabilityId], references: [id])
  client       Client        @relation(fields: [clientId], references: [id])
  Professional Professional? @relation(fields: [professionalId], references: [id])

  payment Payment?

  @@index([availabilityId, clientId])
  @@map("schedulings")
}

model Client {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  phone     String
  document  String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  schedulings Scheduling[]

  @@map("clients")
}

model Payment {
  id           String        @id @default(uuid())
  schedulingId String        @unique @map("scheduling_id") // Um pagamento por agendamento
  amount       Float         @map("amount") // Valor cobrado
  status       PaymentStatus @default(PENDING) // Status do pagamento
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime?     @updatedAt @map("updated_at")

  scheduling Scheduling @relation(fields: [schedulingId], references: [id])

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
